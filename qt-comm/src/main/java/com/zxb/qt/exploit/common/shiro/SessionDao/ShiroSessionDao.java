package com.zxb.qt.exploit.common.shiro.SessionDao;

import com.zxb.qt.exploit.common.boot.utils.JsonUtils;
import com.zxb.qt.exploit.common.redis.RedisUtils;
import com.zxb.qt.exploit.common.shiro.eache.RedisCache;
import com.zxb.qt.exploit.common.shiro.eache.RedisCacheManager;
import org.apache.commons.lang3.SerializationUtils;
import org.apache.shiro.session.Session;
import org.apache.shiro.session.UnknownSessionException;
import org.apache.shiro.session.mgt.eis.AbstractSessionDAO;
import org.apache.shiro.session.mgt.eis.CachingSessionDAO;
import org.apache.shiro.session.mgt.eis.SessionDAO;
import org.omg.CORBA.OBJ_ADAPTER;
import org.springframework.beans.factory.annotation.Autowired;

import java.io.Serializable;
import java.util.Collection;

public class ShiroSessionDao extends AbstractSessionDAO {


    @Autowired
    private RedisCacheManager redisCacheManager;

    @Autowired
    RedisUtils redisUtils;



    @Override
    public Collection<Session> getActiveSessions() {
        return null;
    }

    @SuppressWarnings("all")
    @Override
    protected Serializable doCreate(Session session) {
        Serializable sessionId = generateSessionId( session );
        assignSessionId(session,sessionId);
        saveSession( session , sessionId );
        return sessionId;
    }

    //保存会话 到redis
    private void saveSession(Session session ,Serializable id ){
        if(session !=null&& session.getId()!=null) {
            String value = JsonUtils.obj2String( session );
            redisCacheManager.getCache("",redisUtils ).put( id , value );
        }
    }


    /**
     * 获取 session
     * @param sessionId
     * @return
     */
    @Override
    protected Session doReadSession(Serializable sessionId) {
        if (sessionId == null) {
            return null;
        }
        String key = getKey(":" + sessionId.toString());

        System.out.println( "key : " + key.toString() );

        Object obj = redisCacheManager.getCache(null,redisUtils ).get( "1" );
       // return (Session) SerializationUtils.deserialize(value);

        return (Session) obj;
    }


    @Override
    public void update(Session session) throws UnknownSessionException {

    }

    @Override
    public void delete(Session session) {

    }

    private String  getKey( String key ){
        return RedisCache.REDIS_SHIRO_CACHE + key ;
    }


}
