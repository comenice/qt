package com.zxb.qt.exploit.common.solr;

import com.zxb.qt.exploit.common.boot.runner.MyApplicationRunner;
import com.zxb.qt.exploit.common.boot.utils.JsonUtils;
import com.zxb.qt.exploit.common.redis.RedisKeys;
import com.zxb.qt.exploit.common.redis.RedisTypeEnum;
import com.zxb.qt.exploit.common.redis.RedisUtils;
import com.zxb.qt.exploit.common.redis.cache.CacheModuleBase;
import com.zxb.qt.exploit.common.redis.cache.module.fp.CacheTags;
import com.zxb.qt.exploit.entity.BlogTag;
import com.zxb.qt.exploit.entity.vo.BlogBasicPropVO;
import com.zxb.qt.exploit.entity.vo.BlogIndexVO;
import org.apache.commons.math3.stat.descriptive.summary.Product;
import org.apache.solr.client.solrj.SolrClient;
import org.apache.solr.client.solrj.SolrQuery;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.apache.solr.common.SolrDocument;
import org.apache.solr.common.SolrDocumentList;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;


@Component
public class BlogSolrService {

    @Autowired
    private SolrClient client;

    @Autowired
    private RedisUtils redisUtils;

    @Autowired
    @Qualifier( "cacheTags" )
    private CacheModuleBase cacheModuleBase;



    @Value("solr.core.name")
    private String coreName;
    // 查询条件
    private String titleField = "title";
    private String headContentField = "head_content";


    /**
     *
     * @param keyword 搜索的关键词
     * @param offset 翻页
     * @param count 翻页
     * @param hlPer  高亮的前缀
     * @param hlPos 高亮的后缀
     * @return
     * 搜索
     */
    public List<BlogIndexVO> searchQuestion(String keyword, int offset, int count, String hlPer, String hlPos) throws Exception{
        List<BlogIndexVO> questionList = new ArrayList<>();
        //solr的相关配置
        SolrQuery query = new SolrQuery();
        query.setQuery( keyword );
        query.set( "df" , "keywords" );

        query.setRows(count);
        query.setStart(offset);

        query.setHighlight(true);         //高亮
        //query.addHighlightField( titleField );
        //query.addHighlightField( headContentField );
        query.set("hl.fl", titleField + "," + headContentField);
        query.setHighlightSimplePre(hlPer);  //前缀
        query.setHighlightSimplePost(hlPos);  //后缀
        QueryResponse response = client.query( "new_core" , query );

        //源文档
        SolrDocumentList list = response.getResults();
        //拥有高亮的文档
        Map<String,Map<String,List<String>>> map = response.getHighlighting();

        for (SolrDocument doc:list){
            String title=doc.get( titleField ).toString();
            String content = doc.get( headContentField ).toString();

            List<String> height0 = map.get(doc.get("id")).get( titleField );
            List<String> height1 = map.get(doc.get("id")).get( headContentField );
            if( height0 != null ){
                title = height0.get(0);
            }
            if( height1 != null ){
                content = height1.get(0);
            }
            Integer tid= Integer.parseInt(doc.get("blog_id").toString());
            // 添加博客标签
            //BlogTag 的Id 是int 所以要一致 不然命中不了
            String[] tags = doc.get( "tags" ).toString().split(",");
            //获取拥有的标签
            List<BlogTag> tagList = (List<BlogTag>) cacheModuleBase.getData(RedisTypeEnum.HASH.getStrCode() , RedisKeys.DEFAULT_BLOG_TAG_HASH  , tags);
            System.out.println(  "Taglist : " + tagList );
            BlogIndexVO indexVO = new BlogIndexVO( tid , title ,content , tagList );
            questionList.add( indexVO );
        }
        return questionList;
    }



}
