package com.zxb.qt.exploit.common.shiro;


import com.zxb.qt.exploit.common.shiro.realm.CustRealm;
import com.zxb.qt.exploit.entity.User;
import org.apache.shiro.authc.credential.HashedCredentialsMatcher;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;

import java.util.LinkedHashMap;
import java.util.Map;


/**
 *  shiro 的配置类
 */
@Configuration
@PropertySource("classpath:application-comm.properties")
public class ShiroConfig {

    private String loginUrl;
    private String noRightUrl;
    @Value( "${shrio.hash.iterations}" )
    private int iterations; //迭代次数
    @Value( "${shrio.hash.algorithm}" )
    private String algorithm;  //加密类型


    //private RandomNumberGenerator randomNumberGenerator = new SecureRandomNumberGenerator();
    //private UsernamePasswordToken


    @Bean
    public ShiroFilterFactoryBean shiroFilter(  ) {
        DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        // 必须设置 SecurityManager
        securityManager.setRealm( customRealm() ) ;
        shiroFilterFactoryBean.setSecurityManager(securityManager);
        //setLoginUrl 如果不设置值，默认会自动寻找Web工程根目录下的"/login.jsp"页面 或 "/login" 映射
      /*  shiroFilterFactoryBean.setLoginUrl("/user/");
        // 设置无权限时跳转的 url;
        shiroFilterFactoryBean.setUnauthorizedUrl("/notRole");


        //设置拦截器
        Map<String, String> filterChainDefinitionMap = new LinkedHashMap<>();
        //游客，开放权限
        filterChainDefinitionMap.put("/common/**", "anon");
        filterChainDefinitionMap.put("/static/**", "anon");
        filterChainDefinitionMap.put("/data/**", "anon");
        filterChainDefinitionMap.put("/index.html/**", "anon");
        filterChainDefinitionMap.put("/home.html/**", "anon");
        filterChainDefinitionMap.put("/blog/**", "anon");
        filterChainDefinitionMap.put("/app/**", "anon");
        filterChainDefinitionMap.put( "/custom/**" , "anon" );

        //用户，需要角色权限 “user”
       // filterChainDefinitionMap.put("/user/**", "roles[user]");
        //管理员，需要角色权限 “admin”
        filterChainDefinitionMap.put("/admin/**", "roles[admin]");
        //开放登陆接口
        filterChainDefinitionMap.put("/user/**", "anon");
        //其余接口一律拦截
        //主要这行代码必须放在所有权限设置的最后，不然会导致所有 url 都被拦截
        filterChainDefinitionMap.put("/**", "authc");*/
         // shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);
        System.out.println("Shiro拦截器工厂类注入成功");
        return shiroFilterFactoryBean;
    }

    /**
     * 注入 securityManager
     */
//    @Bean
//    public SecurityManager securityManager() {
//        DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();
//        // 设置realm.
//        securityManager.setRealm(customRealm());
//        return securityManager;
//    }

    /**
     * 自定义身份认证 realm;
     * <p>
     * 必须写这个类，并加上 @Bean 注解，目的是注入 CustomRealm，
     * 否则会影响 CustomRealm类 中其他类的依赖注入
     *
     * realm 是由  授权 和 认证组成的
     */
    @Bean
    public CustRealm customRealm() {
        System.out.println( "Cust Realm" );
        CustRealm custRealm = new CustRealm();

        //设置 认证加密方式
        HashedCredentialsMatcher matcher = new HashedCredentialsMatcher();
        matcher.setHashIterations( iterations );
        matcher.setHashAlgorithmName( algorithm );
        custRealm.setCredentialsMatcher( matcher );

        return custRealm;
    }

















//    public ShiroFilterFactoryBean shiroFilterFactoryBean(SecurityManager securityManager){
//
//        System.out.println( "shrio 》》》》 config " );
//        ShiroFilterFactoryBean factoryBean = new ShiroFilterFactoryBean();
//        factoryBean.setSecurityManager( securityManager );
//
////        LinkedHashMap<String,String> map = new LinkedHashMap<>();
////        map.put("/static/**", "anon");
////
////        //配置退出 过滤器,其中的具体的退出代码Shiro已经替我们实现了
////        map.put("/logout", "logout");
////        //<!-- 过滤链定义，从上向下顺序执行，一般将/**放在最为下边 -->:这是一个坑呢，一不小心代码就不好使了;
////        //<!-- authc:所有url都必须认证通过才可以访问; anon:所有url都都可以匿名访问-->
////        map.put("/**", "authc");
////        // 如果不设置默认会自动寻找Web工程根目录下的"/login.jsp"页面
////        factoryBean.setLoginUrl("/login");
////        // 登录成功后要跳转的链接
////        factoryBean.setSuccessUrl("/index");
////
////        //未授权界面;
////        factoryBean.setUnauthorizedUrl("/403");
////        factoryBean.setFilterChainDefinitionMap( map );
//
//        return factoryBean;
//    }






}
