package com.zxb.qt.exploit.common.shiro.eache;

import com.zxb.qt.exploit.common.redis.RedisUtils;
import org.apache.commons.lang3.SerializationUtils;
import org.apache.shiro.cache.Cache;
import org.apache.shiro.cache.CacheException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import java.util.concurrent.TimeUnit;

public class RedisCache<K, V> implements Cache<K, V> {

    private Logger logger = LoggerFactory.getLogger(this.getClass());

    public static final String REDIS_SHIRO_CACHE = "slife:shiro:cache";
    private String cacheKey;
    private RedisTemplate<K, V> redisTemplate;
    private long globExpire = 30;


    private RedisUtils redisUtils ;

    @SuppressWarnings("rawtypes")
    public RedisCache(String name,  RedisUtils redisUtils) {
        this.cacheKey = REDIS_SHIRO_CACHE + name + ":";
        this.redisUtils = redisUtils ;
    }
    public RedisCache(String name, RedisTemplate client ) {
        this.cacheKey = REDIS_SHIRO_CACHE + name + ":";
        this.redisTemplate = client;
    }
    public RedisCache( ) {

    }


    @Override
    public V get(K key) throws CacheException {
        return (V) redisUtils.get((String) key);
    }

    @Override
    public V put(K key, V value) throws CacheException {
        V old = get(key);
        redisUtils.set( "1" , value );
        return old;
    }

    @Override
    public V remove(K key) throws CacheException {
        V old = get(key);
        redisTemplate.delete(getCacheKey(key));
        return old;
    }

    @Override
    public void clear() throws CacheException {
        redisTemplate.delete(keys());
    }

    @Override
    public int size() {
        return keys().size();
    }

    @Override
    public Set<K> keys() {
        return redisTemplate.keys(getCacheKey("*"));
    }

    @Override
    public Collection<V> values() {
        Set<K> set = keys();
        List<V> list = new ArrayList<>();
        for (K s : set) {
            list.add(get(s));
        }
        return list;
    }

    private K getCacheKey(Object k) {
        return (K) (this.cacheKey + k);
    }

}