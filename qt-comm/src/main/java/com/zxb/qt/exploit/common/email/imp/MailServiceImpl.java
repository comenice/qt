package com.zxb.qt.exploit.common.email.imp;

import com.zxb.qt.exploit.common.boot.exception.BlogException;
import com.zxb.qt.exploit.common.email.MailService;
import com.zxb.qt.exploit.common.thread.MyThreadLocal;
import lombok.Synchronized;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Primary;
import org.springframework.core.io.FileSystemResource;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Controller;
import org.springframework.stereotype.Service;

import javax.mail.BodyPart;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import java.io.File;
import java.util.Date;
import java.util.Random;


@Component
@Primary
public class MailServiceImpl implements MailService {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    @Autowired
    private JavaMailSender mailSender;

    @Value("${mail.fromMail.addr}")
    private String from;
    @Value("${mail.fromMail.subJect}")
    private String subJect;
    private String  content;
    private long codeLife = 120 * 1000;

    /**
     * 发送文本邮件
     *
     * @param to
     * @param subject
     * @param content
     */
    @Override
    public void sendSimpleMail(String to, String subject, String content) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setFrom(from);
        message.setTo(to);
        message.setSubject(subject);
        message.setText(content);

        System.out.println( from );
        System.out.println( to );

        try {
            mailSender.send(message);
            logger.info("简单邮件已经发送。");
        } catch (Exception e) {
            logger.error("发送简单邮件时发生异常！", e);
        }

    }

    /**
     * 发送html邮件
     *
     * @param to
     * @param subject
     * @param content
     */
    @Override
    public void sendHtmlMail(String to, String subject, String content) {
        MimeMessage message = mailSender.createMimeMessage();

        try {
            //true表示需要创建一个multipart message
            MimeMessageHelper helper = new MimeMessageHelper(message, true);
            helper.setFrom(from);
            helper.setTo(to);
            helper.setSubject(subject);
            helper.setText(content, true);

            mailSender.send(message);
            logger.info("html邮件发送成功");
        } catch (MessagingException e) {
            logger.error("发送html邮件时发生异常！", e);
        }
    }


    /**
     * 发送带附件的邮件
     *
     * @param to
     * @param subject
     * @param content
     * @param filePath
     */
    public void sendAttachmentsMail(String to, String subject, String content, String filePath) {
        MimeMessage message = mailSender.createMimeMessage();

        try {
            MimeMessageHelper helper = new MimeMessageHelper(message, true);
            helper.setFrom(from);
            helper.setTo(to);
            helper.setSubject(subject);
            helper.setText(content, true);

            FileSystemResource file = new FileSystemResource(new File(filePath));
            String fileName = filePath.substring(filePath.lastIndexOf(File.separator));
            helper.addAttachment(fileName, file);
            //helper.addAttachment("test"+fileName, file);

            mailSender.send(message);
            logger.info("带附件的邮件已经发送。");
        } catch (MessagingException e) {
            logger.error("发送带附件的邮件时发生异常！", e);
        }
    }


    /**
     * 发送正文中有静态资源（图片）的邮件
     *
     * @param to
     * @param subject
     * @param content
     * @param rscPath
     * @param rscId
     */
    public void sendInlineResourceMail(String to, String subject, String content, String rscPath, String rscId) {
        MimeMessage message = mailSender.createMimeMessage();

        try {
            MimeMessageHelper helper = new MimeMessageHelper(message, true);
            helper.setFrom(from);
            helper.setTo(to);
            helper.setSubject(subject);
            helper.setText(content, true);

            FileSystemResource res = new FileSystemResource(new File(rscPath));
            helper.addInline(rscId, res);

            mailSender.send(message);
            logger.info("嵌入静态资源的邮件已经发送。");
        } catch (MessagingException e) {
            logger.error("发送嵌入静态资源的邮件时发生异常！", e);
        }
    }

    @Override
    public String sendRegisterCode( String to ) {
        String code = yzm() ;
        MimeMessage message = mailSender.createMimeMessage();
        try {
            //true表示需要创建一个multipart message
            MimeMessageHelper helper = new MimeMessageHelper(message, true);
            helper.setFrom(from);
            helper.setTo(to);
            helper.setSubject( subJect );
            String context = Html(  code );
            System.out.println( context );
            helper.setText( " 每天很好 补哦错 开心 加油 " , true);
            mailSender.send(message);
            logger.info("html邮件发送成功");
        } catch (MessagingException e) {
            logger.error("发送html邮件时发生异常！", e);
            // 邮箱 发送有很多种异常 邮箱不存在 邮箱没开启...
            new BlogException( "-1" , " 邮箱发送出现异常 " );
        }
        saveCode( code );
        return code;
    }

    @Override
    public void saveCode(String code) {
        String date = String.valueOf( new Date().getTime() );
        code += "|" + date ;
        MyThreadLocal.set( code );

    }

    @Override
    public String getCode() {
        long nowDate = new Date().getTime();
        String[] cd = MyThreadLocal.get().split("|");
        String code = cd[0];
        long codeDate = Long.valueOf( cd[1] );

        //现在时间 - 验证码存入时间 如果大于 验证码失效时间 说明已经失效啦
        if ( nowDate - codeDate > codeLife ){
            new BlogException( "-1" , " 验证码已失效 请重新发送" );
        }

        return code ;
    }

    @Override
    public void detectorCodePastDue(String date) {

    }

    /**
     * 生成四位数验证码
     * @return
     */
    private String yzm(){

        Random random = new Random();
        int ends = random.nextInt( 99 )+10;
        int ends1 = random.nextInt( 99 )+10;

        String code = ends+""+ends1 ;

        return  code;
    }


    /**
     * html 邮箱格式
     * @param code
     * @return
     */
    private synchronized String Html( String code ){
        return "<html>\n" +
                "<body>\n" +
                "    <h3>欢迎注册!</h3>\n" +
                " <h4>学习交流</h4>您的验证码是: " +
                " <a> " + code +" </a> "  +
                "</body>\n" +
                "</html>";

    }


}